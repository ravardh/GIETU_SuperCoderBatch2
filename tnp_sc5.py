# -*- coding: utf-8 -*-
"""TNP_SC5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18EokP5AK3pzlO99q985nZ-4TNrzqe9JY
"""

class node:
    def __init__(self,data=None):
        self.data=data
        self.left=None
        self.right=None
        self.key=None
root=node(int(input()))
print("node created")
temp=root
print("root data",temp.data)
newNode=node(int(input()))
temp.left=newNode
print("left node added succesfully ",newNode.data)
newNode1=node(int(input()))
temp.right=newNode1
print("right node added succesfully ",newNode1.data)



def Add_Left_child(root):
    temp=root
    while temp.left:
        temp=temp.left
    newNode1=node(int(input()))
    temp.left=newNode1
    return root

def Add_Right_child(root):
    temp=root
    while temp.right:
        temp=temp.right
    newNode3=node(int(input()))
    temp.right=newNode3
    return root


#Depth of a Tree
def findHeight(root):
    if(root==None):
        return 0
    return max(findHeight(root.left),findHeight(root,right))+1

#all child nodes
def printLeafNodes(root):
    if root is None:
        return

    if root.left is None and root.right is None:
        print("Leaf Node:", root.data)

    printLeafNodes(root.left)
    printLeafNodes(root.right)


def topView(root):
  if root==None:
    return
  Q=[root]
  key=0
  TV=dict()
  root.key=key
  while len(Q):
    curr=Q.pop(0)
    key=root.key
    if key not in TV:
      TV[key]=curr.data
    if curr.left != None:
      Q.append(curr.left)
      curr.left.key=key-1
    if curr.left != None:
      Q.append(curr.right)
      curr.right.key=key+1
  for x in sorted(TV.keys()):
    print(TV[x],end=" ")

def bottomView(root):
  if root==None:
    return
  Q=[root]
  key=0
  TV=dict()
  root.key=key
  while len(Q):
    curr=Q.pop(0)
    key=root.key
    if curr.left != None:
      Q.append(curr.left)
      curr.left.key=key-1
    if curr.left != None:
      Q.append(curr.right)
      curr.right.key=key+1
  for x in sorted(TV.keys()):
    print(TV[x],end=" ")









choice=0
while(choice!=7):
    print("1.add to left node")
    print("2.add to right node")
    print("3.find height of the tree")
    print("4.print the leaf nodes")
    print("5.print topview elements")
    print("6.print bottom view elemets")
    print("7.exit")
    choice=int(input("enter your choice"))
    match choice:
        case 1:
            root=Add_Left_child(root)
        case 2:
            root=Add_Right_child(root)
        case 3:
            findHeight(root)
        case 4:
            printLeafNodes(root)
        case 5:
            topView(root)
        case 6:
             bottomView(root)

class node:
    def _init_(self,data=None):
        self.data=data
        self.left=None
        self.right=None


def bottomView(root):
  if root==None:
    return
  Q=[root]
  keyd=0
  TV=dict()
  root.key=key
  while len(Q):
    curr=Q.pop(0)
    key=root.key
    if curr.left != None:
      Q.append(curr.left)
      curr.left.key=key-1
    if curr.left != None:
      Q.append(curr.right)
      curr.right.key=key-1
  for x in sorted(TV.keys()):
    print(TV[x],end=" ")

from collections import deque
class Node:

	def __init__(self, key):

		self.data = key
		self.hd = float('inf')
		self.left = None
		self.right = None

def bottomView(root):

	if (root == None):
		return
	hd = 0

	min_hd, max_hd = 0, 0
	hd_dict = dict()
  q = deque()
	root.hd = hd
	q.append(root)
	while q:
		curr_node = q.popleft()
		hd = curr_node.hd
		min_hd = min(min_hd, hd)
		max_hd = max(max_hd, hd)
		hd_dict[hd] = curr_node.data

		if curr_node.left:
			curr_node.left.hd = hd - 1
			q.append(curr_node.left)
		if curr_node.right:
			curr_node.right.hd = hd + 1
			q.append(curr_node.right)
	for i in range(min_hd, max_hd+1):
		print(hd_dict[i], end = ' ')

# Driver Code
if __name__=='__main__':

	root = Node(20)
	root.left = Node(8)
	root.right = Node(22)
	root.left.left = Node(5)
	root.left.right = Node(3)
	root.right.left = Node(4)
	root.right.right = Node(25)
	root.left.right.left = Node(10)
	root.left.right.right = Node(14)

	print("Bottom view of the given binary tree :")

	bottomView(root)