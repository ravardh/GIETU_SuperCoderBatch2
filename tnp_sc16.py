# -*- coding: utf-8 -*-
"""TNP_SC16

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15n10azTDXFQLKtcr9usxIT1W0CGmAkqY
"""

def DFS_cycle(start, graph, visited, parent):
    visited[start - 1] = True

    for i in graph[start - 1]:
        if not visited[i[1] - 1]:
            parent[i[1] - 1] = start
            if DFS_cycle(i[1], graph, visited, parent):
                return True
        elif parent[start - 1] != i[1]:
            return True

    return False


def has_cycle(graph):
    v = len(graph)
    visited = [False] * v
    parent = [-1] * v

    for i in range(v):
        if not visited[i]:
            if DFS_cycle(i + 1, graph, visited, parent):
                return True

    return False

def create_graph(graph,source,destination,weight=1):
    graph[source-1].append((source,destination,weight))

v = 2  #11
graph = [[] for _ in range(v)]

create_graph(graph, 1, 2)
create_graph(graph, 2, 1)
# create_graph(graph, 1, 2)
# create_graph(graph, 1, 3)
# create_graph(graph, 1, 10)
# create_graph(graph, 2, 1)
# create_graph(graph, 2, 4)
# create_graph(graph, 3, 1)
# create_graph(graph, 3, 7)
# create_graph(graph, 4, 2)
# create_graph(graph, 4, 5)
# create_graph(graph, 4, 7)
# create_graph(graph, 4, 8)
# create_graph(graph, 5, 4)
# create_graph(graph, 5, 6)
# create_graph(graph, 6, 5)
# create_graph(graph, 6, 10)
# create_graph(graph, 6, 9)
# create_graph(graph, 7, 3)
# create_graph(graph, 7, 4)
# create_graph(graph, 7, 11)
# create_graph(graph, 8, 4)
# create_graph(graph, 8, 9)
# create_graph(graph, 9, 6)
# create_graph(graph, 9, 8)
# create_graph(graph, 10, 1)
# create_graph(graph, 10, 6)
# create_graph(graph, 11, 7)

print(graph)
print("Does the graph contain a cycle?", has_cycle(graph))

import sys


class Graph():
	def __init__(self, vertices):
		self.V = vertices
		self.graph = [[0 for column in range(vertices)]
					for row in range(vertices)]
	def printMST(self, parent):
		print("Edge \tWeight")
		for i in range(1, self.V):
			print(parent[i], "-", i, "\t", self.graph[i][parent[i]])

	def minKey(self, key, mstSet):
		min = sys.maxsize

		for v in range(self.V):
			if key[v] < min and mstSet[v] == False:
				min = key[v]
				min_index = v

		return min_index

	def primMST(self):
		key = [sys.maxsize] * self.V
		parent = [None] * self.V
    key[0] = 0
		mstSet = [False] * self.V

		parent[0] = -1

		for cout in range(self.V):
			u = self.minKey(key, mstSet)
			mstSet[u] = True
			for v in range(self.V):
				if self.graph[u][v] > 0 and mstSet[v] == False \
				and key[v] > self.graph[u][v]:
					key[v] = self.graph[u][v]
					parent[v] = u

		self.printMST(parent)

if __name__ == '__main__':
	g = Graph(5)
	g.graph = [[0, 2, 0, 6, 0],
			[2, 0, 3, 8, 5],
			[0, 3, 0, 0, 7],
			[6, 8, 0, 0, 9],
			[0, 5, 7, 9, 0]]

	g.primMST()

class Graph:

	def __init__(self, vertices):
		self.V = vertices
		self.graph = []
h
	def addEdge(self, u, v, w):
		self.graph.append([u, v, w])
	def find(self, parent, i):
		if parent[i] != i:
			parent[i] = self.find(parent, parent[i])
		return parent[i]
	def union(self, parent, rank, x, y):
		if rank[x] < rank[y]:
			parent[x] = y
		elif rank[x] > rank[y]:
			parent[y] = x
		else:
			parent[y] = x
			rank[x] += 1
	def KruskalMST(self):
		result = []
		i = 0
		e = 0
		self.graph = sorted(self.graph,
							key=lambda item: item[2])

		parent = []
		rank = []

		for node in range(self.V):
			parent.append(node)
			rank.append(0)
		while e < self.V - 1:
			u, v, w = self.graph[i]
			i = i + 1
			x = self.find(parent, u)
			y = self.find(parent, v)
			if x != y:
				e = e + 1
				result.append([u, v, w])
				self.union(parent, rank, x, y)

		minimumCost = 0
		print("Edges in the constructed MST")
		for u, v, weight in result:
			minimumCost += weight
			print("%d -- %d == %d" % (u, v, weight))
		print("Minimum Spanning Tree", minimumCost)


if __name__ == '__main__':
	g = Graph(4)
	g.addEdge(0, 1, 10)
	g.addEdge(0, 2, 6)
	g.addEdge(0, 3, 5)
	g.addEdge(1, 3, 15)
	g.addEdge(2, 3, 4)


	g.KruskalMST()

def printJobScheduling(arr, t):
	n = len(arr)
	for i in range(n):
		for j in range(n - 1 - i):
			if arr[j][2] < arr[j + 1][2]:
				arr[j], arr[j + 1] = arr[j + 1], arr[j]
	result = [False] * t
	job = ['-1'] * t
	for i in range(len(arr)):
		for j in range(min(t - 1, arr[i][1] - 1), -1, -1):
			if result[j] is False:
				result[j] = True
				job[j] = arr[i][0]
				break

	print(job)


if __name__ == '__main__':
	arr = [['a', 2, 100],
			['b', 1, 19],
			['c', 2, 27],
			['d', 1, 25],
			['e', 3, 15]]


	print("Following is maximum profit sequence of jobs")
	printJobScheduling(arr, 3)