# -*- coding: utf-8 -*-
"""TNP_SC13

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ryk2EYoMBeE5YeB9GJb_D-4QYYJK5d5i
"""
class Edge:
    def _init_(self,s,d,w):
        self.source=s
        self.destination=d
        self.weight=w
class GraphLevelOrder:
    def _init_(self):
            self.l = []
    def insertv(self):
        for i in range(9):
            self.l.append([])
        self.l[0].append(Edge(1,2,4))
        self.l[0].append(Edge(1,8,8))

        self.l[1].append(Edge(2,3,8))
        self.l[1].append(Edge(2,8,11))
        self.l[1].append(Edge(2,1,4))


        self.l[2].append(Edge(3,2,8))
        self.l[2].append(Edge(3,9,2))
        self.l[2].append(Edge(3,6,4))
        self.l[2].append(Edge(3,4,7))

        self.l[3].append(Edge(4,3,7))
        self.l[3].append(Edge(4,6,14))
        self.l[3].append(Edge(4,5,9))

        self.l[4].append(Edge(5,4,9))
        self.l[4].append(Edge(5,6,10))

        self.l[5].append(Edge(6,5,10))
        self.l[5].append(Edge(6,4,14))
        self.l[5].append(Edge(6,3,4))
        self.l[5].append(Edge(6,7,2))


        self.l[6].append(Edge(7,6,2))
        self.l[6].append(Edge(7,9,6))
        self.l[6].append(Edge(7,8,1))

        self.l[7].append(Edge(8,1,8))
        self.l[7].append(Edge(8,2,11))
        self.l[7].append(Edge(8,9,7))
        self.l[7].append(Edge(8,7,1))

        self.l[8].append(Edge(9,3,2))
        self.l[8].append(Edge(9,8,7))
        self.l[8].append(Edge(9,7,6))

    def display(self):
        for i in self.l:
            for j in i:
                print("( ", j.source, " , ", j.destination, " )", end="\t")
            print()


    def findShortestPath(self,start):
      dist = dict()
      for x in range(1,len(self.l)+1):
        dist[x]=float('inf')
      dist[start]=0
      Visit=[]
      while len(dist) != 0:
        found_key = next((key for key, value in dist.items() if value == min(dist.values())), None)
        for i in range(len(self.l[found_key-1])):
          if(self.l[found_key-1][i].destination in dist.keys()):
            dist[self.l[found_key-1][i].destination] = min(dist[self.l[found_key-1][i].destination], dist[found_key] + self.l[found_key-1][i].weight)
        Visit.append([found_key,dist[found_key]])
        del dist[found_key]
      return Visit

g=GraphLevelOrder()
g.insertv()
g.display()
start=1
print(g.findShortestPath(start))