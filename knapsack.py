# -*- coding: utf-8 -*-
"""knapsack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rp5rXs2LcuKw3V_cRTELkEeu_OVd0tiB
"""

#knapsack problem
def knapsack(weights, values, capacity):
    n = len(weights)


    dp = [[0] * (capacity + 1) for _ in range(n + 1)]

    # Fill the dp array using dynamic programming
    for i in range(1, n + 1):
        for w in range(capacity + 1):
            if weights[i - 1] <= w:
                dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1]
                 [w - weights[i - 1]])
            else:
                dp[i][w] = dp[i - 1][w]

    # Trace back to find the selected items
    selected_items = []
    i, w = n, capacity
    while i > 0 and w > 0:
        if dp[i][w] != dp[i - 1][w]:
            selected_items.append(i - 1)
            w -= weights[i - 1]
        i -= 1

    return dp[n][capacity], selected_items


weights = [2, 3, 5, 7,1,4,1]
values = [10,5,15,7,6,18,3]
capacity = 15

max_value, selected_items = knapsack(weights, values, capacity)

print("Maximum value:", max_value)
print("Selected items:", selected_items)