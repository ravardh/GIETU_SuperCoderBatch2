# -*- coding: utf-8 -*-
"""TNP_SC3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ryABw_P7QwObOb5ZwnA0-M_IwVKbn1v2
"""

#KMP Algorithm
def KMPSearch(pat, data):
	M = len(pat)
	N = len(data)

	lps = [0]*M #size of lps list
	j = 0

	LPS(pat, M, lps)

	i = 0
	while (N - i) >= (M - j):
		if pat[j] == data[i]:
			i += 1
			j += 1

		if j == M:
			print("Found pattern at index " + str(i-j))
			j = lps[j-1]

		elif i < N and pat[j] != data[i]:
			if j != 0:
				j = lps[j-1]
			else:
				i += 1



def LPS(pat, M, lps):
	len = 0

	lps[0] = 0
	i = 1


	while i < M:
		if pat[i] == pat[len]:
			len += 1
			lps[i] = len
			i += 1
		else:
			if len != 0:
				len = lps[len-1]
			else:
				lps[i] = 0
				i += 1


# Driver code
data = "ABAABABCABABABCAABABCABAC"
pat = "ABABC"
KMPSearch(pat, data)

#LINK LIST

class node:
    def __init__(self,data=None):
        self.data=data
        self.next=None
newNode = node(1)
start = newNode

start.next= node(2)
start.next.next= node(3)
start.next.next.next= node(4)
start.next.next.next.next= node(5)

temp = start
print(temp)
while temp:
    print(temp.data)
    temp=temp.next
    print(temp)


n1=node(0)
n1.next=start
start=n1
print("Node added into begining")

temp = start
print(temp)
while temp:
    print(temp.data)
    temp=temp.next
    print(temp)



n2=node(6)
temp=start
while temp.next:
    temp=temp.next
temp.next=n2
print("Node added into End")

temp = start
print(temp)
while temp:
    print(temp.data)
    temp=temp.next
    print(temp)


c=0
pos=int(input())
temp=start
while temp:
  temp1=temp
  temp=temp.next
  c=c+1
  if(c==pos-1):
    n3=node(9)
    n3.next=temp.next
    temp.next=n3
print("new node added at the position",pos)
temp = start
print(temp)
while temp:
    print(temp.data)
    temp=temp.next
    print(temp)

c1=0
pos=int(input())

def factorial(num):
  if(num==1):
    return 1
  elif(num==0):
    return 0
  else:
    return num*factorial(num-1)

num=int(input())
print("Factorial of number is:",factorial(num))

def power(b,p):
  if(p==0):
    return 1
  else:
    return b*power(b,p-1)

b=int(input())
p=int(input())
print("Power of the base number is:",power(b,p))