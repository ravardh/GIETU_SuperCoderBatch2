# -*- coding: utf-8 -*-
"""nqueen_matrixmul.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mNwFPQ8v28VpHw1kskTVqo5nmiJdnzrG
"""

def is_safe(board, row, col, n):
    for i in range(row):
        if board[i] == col or abs(board[i] - col) == row - i:
            return False
    return True


def solve_n_queens_util(board, row, n, solutions):
    if row == n:
        solutions.append(board[:])
        return

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row] = col
            solve_n_queens_util(board, row + 1, n, solutions)


def solve_n_queens(n):
    board = [-1] * n
    solutions = []
    solve_n_queens_util(board, 0, n, solutions)

    if not solutions:
        print("Solution does not exist")
        return False

    print("Number of solutions:", len(solutions))
    for sol in solutions:
        print(sol)


# Example usage:
n = 4
solve_n_queens(n)

#matrix multiplication
def matrix_multiply(A, B):
    if len(A[0]) != len(B):
        print("Matrix multiplication not possible!")
        return None

    result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))]

    for i in range(len(A)):
        for j in range(len(B[0])):
            for k in range(len(B)):
                result[i][j] += A[i][k] * B[k][j]

    return result

# Example usage:
A = [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]]

B = [[9, 8, 7],
     [6, 5, 4],
     [3, 2, 1]]

result = matrix_multiply(A, B)

if result:
    print("Resultant Matrix:")
    for row in result:
        print(row)