# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ukbivwWkMOzHloNKVPkeWZevWbdq87yx
"""

class Node:
  def __init__(self,data):
    self.data=data
    self.left=None
    self.right=None

def leftView(root,level,max_level):
  if root==None:
    return
  if(max_level[0]<level):
    print(root.data,end=" ")
    max_level[0]=level

  leftView(root.left,level+1,max_level)
  leftView(root.right,level+1,max_level)

def View(root):
  max_level=[0]
  leftView(root,1,max_level)

root=Node(10)
root.left=Node(50)
root.right=Node(40)
root.left.left=Node(60)
root.left.right=Node(80)
root.right.left=Node(70)
root.right.right=Node(30)

View(root)









class Node:
  def __init__(self,key):
    self.key=key
    self.left=None
    self.right=None

def insert(node,key):
  if node is None:
    return Node(key)
  if key<node.key:
    node.left=insert(node.left,key)
  if key>node.key:
    node.right=insert(node.right,key)
  return node

def Search(root,key):
  if root==None or root.key==key:
    return root
  if root.key<key:
    return earch(root.right,key)
  return Search(root.left,key)

root=None
root=insert(root,50)
insert(root,30)
insert(root,80)
insert(root,10)
insert(root,20)
insert(root,100)
insert(root,40)
insert(root,30)

key=50
if Search(root,key) is None:
  print(key,"not found")
else:
  print(key,"found")